#include <stdio.h>   /* Standard input/output definitions */
#include <stdlib.h>
#include <string.h>  /* String function definitions */
#include <unistd.h>  /* UNIX standard function definitions */
#include <fcntl.h>   /* File control definitions */
#include <errno.h>   /* Error number definitions */
#include <termios.h> /* POSIX terminal control definitions */
#include <time.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <sys/wait.h>
#include <signal.h>

#include <iostream>
#include <new>
#include <fstream>
#include <mysql.h>

#define BACKLOG 5
#define BYTES 1500
#define TIMEGAP 0.5
#define refresh_time 0.01
#define USBDEV "/dev/ttyACM0"

using namespace std;

	MYSQL_RES *res;
	MYSQL_ROW row;
	MYSQL *conn;		
	
int mysqlConnect(void) {

//connect to mySQL database
	char *server = "localhost";
	char *user = "root";
	char *password = "spadeace";
	char *database = "IMU";
	
	conn=mysql_init(NULL);
	
	if(!mysql_real_connect(conn, server, user, password, database, 0, NULL, 0))
		{
	fprintf(stderr, "%s\n", mysql_error(conn));
		}
	else
		{
	printf("Successfully connected to MySQL.\n");
		}

return 0;
}

struct bearings
	{
		float roll;
		float pitch;
		float yaw;
	} current, desired;
	
float *IMU() {

//dummy script to generate data in same format as data generated by IMU for demo purpose
	float bearings[3];
	int x, y, z;
	int i;
	
	x = -20;
	y = -50;
	z = -10;


	ofstream dummy;	
	dummy.open("IMU.csv");
	
	for(i = 0; i<100; i++) {
	
	dummy << x << "," << y << "," << z << endl;
	
	x++;
	y++;
	z++;
	}

	dummy.close();

//while(1){
/******* Reading data from IMU ********/
/*	char buf[BYTES];
	size_t nbytes;
	ssize_t bytes_read;
	nbytes = sizeof(buf);
	const char *x;
	const char *y;
	const char *z;
	float bearings[3];
	int fd;
		
	fd = open("/dev/ttyUSB0", O_RDWR | O_NOCTTY | O_NDELAY); // Open IMU serial port to read output
	      if (fd == -1)
	      {
		perror("open_port: Unable to open /dev/ttyUSB0 - ");
	      }

		wait(TIMEGAP); // refresh rate

		fcntl(fd, F_SETFL, 0);

		bytes_read = read(fd, buf, nbytes); // reads from serial port


		printf("Number of bytes read: %zd\n",bytes_read);
//		printf("Read: %s\n", buf);
*/
	

	
/****** Creating file IMUdata.csv and storing the serial output in it. *******/

//		ofstream IMU;
		
//		IMU.open("IMUdata.csv");
//		IMU << buf;//  store data received from IMU in IMU.csv
		
		
//		IMU.close(); //Close the file
	
/****** Loading serial output from IMUdata.csv and storing it in a table. *******/

		mysql_query(conn, "LOAD DATA LOCAL INFILE '/home/mihir/Desktop/cs_placement/IMU.csv' INTO TABLE IMU FIELDS TERMINATED BY ','");
		mysql_query(conn, "select * from IMU");
	
		res = mysql_use_result(conn);
		printf("Number of values in row: %i\n",mysql_num_fields(res));
	
/******* Calling the roll, pitch and yaw values from the table *********/
		
		while((row = mysql_fetch_row(res)) != NULL) {
			bearings[0] = atof(row[0]);
			bearings[1] = atof(row[1]);
			bearings[2] = atof(row[2]);
			}
		printf("Quadcopter's roll:\t%f \n",bearings[0]);
		printf("Quadcopter's pitch:\t%f \n",bearings[1]);
		printf("Quadcopter's yaw:\t%f \n",bearings[2]);
//		mysql_query(conn,"truncate IMU");
		mysql_close(conn);
//}
return 0;
}

int main() {
	mysqlConnect();
	IMU();
	
	return 0;
}
